{"version":3,"sources":["modules/fetchData.tsx","modules/postData/User/User.tsx","modules/postData/CommentList/CommentList.tsx","modules/postData/Post.tsx","modules/postData/PostList.tsx","modules/DownloadTask.tsx","App.tsx","index.tsx"],"names":["fetchData","urlUnit","a","fetch","data","json","response","User","name","email","address","id","className","key","city","street","suite","zipcode","CommentList","props","map","body","title","toUpperCase","slice","message","Post","user","comments","postTitle","postMessage","PostList","preparedPosts","post","DownloadTask","setButtonText","getData","buttonText","useState","buttonDisable","setButtonDisable","type","disabled","onClick","App","setPreparedPosts","isLoaded","setLoaded","filterTitle","setFilterTitle","posts","users","find","person","userId","filter","comment","postId","filteredPosts","useMemo","includes","trim","onChange","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3ac081c.chunk.js","sourcesContent":["export async function fetchData<T>(urlUnit: string): Promise<T> {\n  const URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n  const data = await fetch(`${URL}${urlUnit}`);\n\n  const response = await data.json();\n\n  return response;\n}\n","import React, {FC} from 'react';\nimport './User.css';\nimport { User as UserInterface } from '../../interfaces';\n\nexport const User: FC<UserInterface> = ({ name, email, address, id }) => (\n  <div className=\"user\" key={id}>\n\n    <b className=\"user__name\">\n      {name}\n        &nbsp;\n    </b>\n\n    <small className=\"user__mail\">{email}</small>\n\n    <div className=\"user__address\">\n      <p>\n        {address.city}\n      </p>\n      <p>\n        {address.street}\n          &nbsp;\n        {address.suite}\n      </p>\n      <p>\n        {address.zipcode}\n      </p>\n    </div>\n\n  </div>\n)\n","import React, {FC} from 'react';\nimport './CommentList.css';\nimport { Comment } from '../../interfaces';\n\ninterface Props {\n  props: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ props }) => (\n  <div className=\"commentList\">\n\n    {props.map(({ name, body, email, id }) => {\n      const title = (name[0]).toUpperCase()\n        + (name).slice(1);\n\n      const message = (body[0]).toUpperCase()\n        + (body).slice(1);\n\n      return (\n        <div className=\"commentList__comment\" key={id}>\n\n          <h3 className=\"commentList__title\">{title}</h3>\n          <p>{message}</p>\n          <div className=\"commentList__mail\">\n            {email}\n          </div>\n\n        </div>\n      );\n    })}\n  </div>\n)\n","import React, {FC} from 'react';\nimport './Post.css';\nimport { User } from './User/User';\nimport { CommentList } from './CommentList/CommentList';\nimport { Comment, User as UserInterface } from '../interfaces';\n\n\ninterface Props {\n  body: string;\n  comments: Comment[];\n  title: string;\n  user: UserInterface;\n}\n\nexport const Post: FC<Props> = ({ title, body, user, comments }) => {\n  const postTitle = (title)[0].toUpperCase() + (title).slice(1);\n  const postMessage = (body)[0].toUpperCase() + (body).slice(1);\n\n  return (\n    <>\n      <h3 className=\"post__title\">{postTitle}</h3>\n      <p>{postMessage}</p>\n      <User {...user} />\n      <CommentList props={comments} />\n    </>\n  );\n};\n","import React, {FC} from 'react';\nimport { Post } from './Post';\nimport './PostList.css';\nimport { PreparedPosts } from '../interfaces';\n\ninterface Props {\n  preparedPosts: PreparedPosts[];\n}\n\nexport const PostList: FC<Props> = ({ preparedPosts }) => (\n  <>\n    {preparedPosts.map(post => (\n\n      <div className=\"post\" key={post.id}>\n        <Post {...post} />\n      </div>\n\n    ))}\n  </>\n);\n","import React, { useState, FC } from 'react';\n\ninterface Props {\n  setButtonText: Function;\n  getData: Function;\n  buttonText: string;\n}\n\nexport const DownloadTask: FC<Props> = ({\n  setButtonText,\n  getData,\n  buttonText,\n}) => {\n  const [buttonDisable, setButtonDisable] = useState(false);\n\n  return (\n    <button\n      type=\"button\"\n      disabled={buttonDisable}\n      onClick={\n        () => {\n          setButtonDisable(true);\n          setButtonText('Loading');\n          getData();\n        }\n      }\n    >\n      {buttonText}\n    </button>\n  );\n};\n","import React, { useState, useMemo } from 'react';\r\nimport { fetchData } from './modules/fetchData';\r\nimport { PostList } from './modules/postData/PostList';\r\nimport { PreparedPosts, User, Post, Comment } from './modules/interfaces';\r\n\r\nimport './App.css';\r\nimport { DownloadTask } from './modules/DownloadTask';\r\n\r\nconst App = () => {\r\n  const [preparedPosts, setPreparedPosts] = useState<PreparedPosts[]>([]);\r\n  const [isLoaded, setLoaded] = useState(false);\r\n  const [buttonText, setButtonText] = useState('Download tasks');\r\n  const [filterTitle, setFilterTitle] = useState('');\r\n\r\n  async function getData() {\r\n    const posts: Post[] = await fetchData('posts.json');\r\n    const users: User[] = await fetchData('users.json');\r\n    const comments: Comment[] = await fetchData('comments.json');\r\n\r\n    setPreparedPosts(\r\n      posts.map(post => ({\r\n        ...post,\r\n        user: users.find(person => person.id === post.userId),\r\n        comments: comments.filter(comment => comment.postId === post.id),\r\n      }) as PreparedPosts),\r\n    );\r\n    setLoaded(true);\r\n  }\r\n\r\n  const filteredPosts = useMemo(() => preparedPosts.filter(post => post.title.includes(filterTitle.trim())\r\n    || post.body.includes(filterTitle.trim())),\r\n  [filterTitle, preparedPosts]);\r\n\r\n  if (!isLoaded) {\r\n    return (\r\n      <>\r\n        <DownloadTask\r\n          setButtonText={setButtonText}\r\n          getData={getData}\r\n          buttonText={buttonText}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (isLoaded) {\r\n\r\n    return (\r\n      <>\r\n        <input type=\"text\"\r\n          onChange={event => {\r\n            setFilterTitle(event.target.value)\r\n          }\r\n        }\r\n        />\r\n\r\n        <PostList\r\n          preparedPosts={filteredPosts}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}